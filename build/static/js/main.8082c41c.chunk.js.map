{"version":3,"sources":["animeReducer.js","contexts/AnimeContext.js","components/Input.jsx","components/Card.jsx","components/Cards.jsx","App.js","index.js"],"names":["animeReducer","state","action","type","items","localStorage","getItem","console","log","JSON","parse","stateCopy","name","anime","genre","url","aid","rating","id","Date","now","setItem","stringify","newStateCopy","filter","object","AnimeContext","createContext","AnimeContextProvider","props","useReducer","animes","dispatch","Provider","value","children","Input","useState","setName","animeName","setAnimeName","setData","useContext","useEffect","fetch","method","headers","Accept","body","query","variables","then","r","json","data","errors","alert","Media","title","english","romaji","coverImage","extraLarge","genres","averageScore","DataFetcher","onSubmit","e","preventDefault","placeholder","onChange","target","required","Card","className","style","background","map","item","index","onClick","Cards","length","anime_id","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8082c41c.chunk.js","sourcesContent":["function animeReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOAD_ANIMES\":\r\n      let items = localStorage.getItem(\"list\");\r\n      console.log(items);\r\n      if (items) {\r\n        const parsedItems = JSON.parse(items);\r\n        return parsedItems;\r\n      } else {\r\n        return [...state];\r\n      }\r\n\r\n    case \"ADD_ANIME\":\r\n      let stateCopy = [\r\n        ...state,\r\n        {\r\n          name: action.anime.name,\r\n          genre: action.anime.genre,\r\n          url: action.anime.url,\r\n          aid: action.anime.aid,\r\n          rating: action.anime.rating,\r\n          id: Date.now(),\r\n        },\r\n      ];\r\n      localStorage.setItem(\"list\", JSON.stringify(stateCopy));\r\n      return stateCopy;\r\n\r\n    // return [\r\n    //   ...state,\r\n    //   {\r\n    //     name: action.anime.name,\r\n    //     genre: action.anime.genre,\r\n    //     url: action.anime.url,\r\n    //     aid: action.anime.aid,\r\n    //     rating: action.anime.rating,\r\n    //     id: Date.now(),\r\n    //   },\r\n    // ];\r\n    case \"REMOVE_ANIME\":\r\n      let newStateCopy = state.filter((object) => object.id !== action.id);\r\n      localStorage.setItem(\"list\", JSON.stringify(newStateCopy));\r\n      return newStateCopy;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default animeReducer;\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport animeReducer from \"../animeReducer\";\r\n\r\nexport const AnimeContext = createContext();\r\n\r\nfunction AnimeContextProvider(props) {\r\n  const [animes, dispatch] = useReducer(animeReducer, []);\r\n  return (\r\n    <AnimeContext.Provider value={{ animes, dispatch }}>\r\n      {props.children}\r\n    </AnimeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default AnimeContextProvider;\r\n","import { useState, useReducer, useEffect, useContext } from \"react\";\r\nimport { AnimeContext } from \"../contexts/AnimeContext\";\r\n\r\nfunction Input() {\r\n  // const [data, setData] = useState([]);\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [animeName, setAnimeName] = useState(\"\");\r\n  const [data, setData] = useState(\"\");\r\n  const { dispatch } = useContext(AnimeContext);\r\n\r\n  function DataFetcher(name) {\r\n    const query = `query($name: String, $status: MediaStatus) {\r\n            Media(search: $name, type: ANIME, status: $status) {\r\n              id,\r\n              title {\r\n                english,\r\n                romaji,\r\n              },\r\n              status,\r\n              averageScore,\r\n              type,\r\n              genres,\r\n              episodes,\r\n              nextAiringEpisode {\r\n                id,\r\n                airingAt,\r\n                timeUntilAiring\r\n              },\r\n              bannerImage,\r\n              coverImage {\r\n                large,\r\n                extraLarge\r\n              }\r\n            }\r\n          }`;\r\n\r\n    fetch(\"https://graphql.anilist.co\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: { name: name },\r\n      }),\r\n    })\r\n      .then((r) => r.json())\r\n      .then((data) => {\r\n        console.log(\"data returned:\", data);\r\n        if (data.errors) {\r\n          alert(\"ANIME NAME NOT FOUND... BE MORE SPECIFIC\");\r\n        } else {\r\n          setData(data);\r\n          dispatch({\r\n            type: \"ADD_ANIME\",\r\n            anime: {\r\n              name: data.data.Media.title.english\r\n                ? data.data.Media.title.english\r\n                : data.data.Media.title.romaji,\r\n              url: data.data.Media.coverImage.extraLarge,\r\n              genre: data.data.Media.genres,\r\n              aid: data.data.Media.id,\r\n              rating: data.data.Media.averageScore,\r\n            },\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setAnimeName(name);\r\n    // console.log(animeName);\r\n    // DataFetcher(animeName);\r\n    // dispatch({ type: \"ADD_ANIME\", anime: { name } });\r\n    setName(\"\");\r\n    // setGenre(\"\");\r\n  }\r\n  useEffect(() => {\r\n    if (animeName) {\r\n      DataFetcher(animeName);\r\n    }\r\n  }, [animeName]);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"LOAD_ANIMES\" });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <form id=\"input_form\" onSubmit={handleSubmit}>\r\n        <input\r\n          id=\"name\"\r\n          type=\"text\"\r\n          name={\"animeName\"}\r\n          value={name}\r\n          placeholder=\"Anime Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\">INSERT</button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import { useContext } from \"react\";\r\nimport \"../card.css\";\r\nimport { AnimeContext } from \"../contexts/AnimeContext\";\r\n\r\nfunction Card(props) {\r\n  const { dispatch } = useContext(AnimeContext);\r\n  function handleDelete(e) {\r\n    dispatch({ type: \"REMOVE_ANIME\", id: props.id });\r\n  }\r\n  // const genres = props.genre.split(\",\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"card_outer\"\r\n        style={{\r\n          background: `linear-gradient(0deg, rgba(0, 0, 0, 0.08), rgba(0, 0, 0, 0.08)),\r\n    url(${props.url}) no-repeat center center/cover`,\r\n        }}\r\n      >\r\n        <div className=\"card_content_cover\"></div>\r\n        <div className=\"card_content\">\r\n          <h1>{props.name}</h1>\r\n          <div className=\"genre\">\r\n            <p>\r\n              {props.genre.map((item, index) => {\r\n                {\r\n                  /* return <p key={index}>{item}</p>; */\r\n                }\r\n                return item + \" \";\r\n              })}\r\n            </p>\r\n          </div>\r\n          <div className=\"card_details\">\r\n            <div className=\"card_rating\">\r\n              <p>{props.rating / 10}</p>\r\n              <i className=\"fas fa-star\"></i>\r\n            </div>\r\n          </div>\r\n          <button id=\"delete\" onClick={handleDelete}>\r\n            DELETE\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import Card from \"./Card\";\r\nimport { AnimeContext } from \"../contexts/AnimeContext\";\r\nimport { useContext } from \"react\";\r\n\r\nfunction Cards() {\r\n  const { animes } = useContext(AnimeContext);\r\n  return animes.length ? (\r\n    <div className=\"cards\">\r\n      {animes.map((anime) => {\r\n        console.log(animes);\r\n        return (\r\n          <Card\r\n            name={anime.name}\r\n            id={anime.id}\r\n            key={anime.id}\r\n            anime_id={anime.aid}\r\n            genre={anime.genre}\r\n            rating={anime.rating}\r\n            url={anime.url}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  ) : (\r\n    <h1 className=\"empty\">No More Animes On The List</h1>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import \"./App.css\";\nimport Input from \"./components/Input\";\nimport Cards from \"./components/Cards\";\nimport AnimeContextProvider from \"./contexts/AnimeContext\";\n\nfunction App() {\n  return (\n    <AnimeContextProvider>\n      <div className=\"cover\">\n        <div className=\"form\">\n          <Input />\n        </div>\n        <Cards />\n      </div>\n    </AnimeContextProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}