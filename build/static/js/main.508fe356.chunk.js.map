{"version":3,"sources":["animeReducer.js","contexts/AnimeContext.js","components/Input.jsx","components/Card.jsx","components/Cards.jsx","App.js","index.js"],"names":["animeReducer","state","action","type","items","localStorage","getItem","JSON","parse","stateCopy","name","anime","genre","url","aid","rating","episodes","date","id","Date","now","setItem","stringify","newStateCopy","filter","object","AnimeContext","createContext","AnimeContextProvider","props","useReducer","animes","dispatch","Provider","value","children","Input","useState","setName","animeName","setAnimeName","setData","useContext","useEffect","fetch","method","headers","Accept","body","query","variables","then","r","json","data","console","log","errors","alert","Media","title","english","romaji","coverImage","extraLarge","genres","averageScore","startDate","DataFetcher","className","onSubmit","e","preventDefault","placeholder","autoComplete","onChange","target","required","Card","startX","scrollLeft","slider","useRef","mouseDown","stopDragging","event","style","background","month","year","ref","onMouseDown","pageX","current","offsetLeft","onMouseUp","onMouseLeave","onMouseMove","scroll","map","item","index","onClick","class","Cards","length","anime_id","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.508fe356.chunk.js","sourcesContent":["function animeReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOAD_ANIMES\":\r\n      let items = localStorage.getItem(\"list\");\r\n      if (items) {\r\n        const parsedItems = JSON.parse(items);\r\n        return parsedItems;\r\n      } else {\r\n        return [...state];\r\n      }\r\n\r\n    case \"ADD_ANIME\":\r\n      let stateCopy = [\r\n        ...state,\r\n        {\r\n          name: action.anime.name,\r\n          genre: action.anime.genre,\r\n          url: action.anime.url,\r\n          aid: action.anime.aid,\r\n          rating: action.anime.rating,\r\n          episodes: action.anime.episodes,\r\n          date: action.anime.date,\r\n          id: Date.now(),\r\n        },\r\n      ];\r\n      localStorage.setItem(\"list\", JSON.stringify(stateCopy));\r\n      return stateCopy;\r\n\r\n    case \"REMOVE_ANIME\":\r\n      let newStateCopy = state.filter((object) => object.id !== action.id);\r\n      localStorage.setItem(\"list\", JSON.stringify(newStateCopy));\r\n      return newStateCopy;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default animeReducer;\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport animeReducer from \"../animeReducer\";\r\n\r\nexport const AnimeContext = createContext();\r\n\r\nfunction AnimeContextProvider(props) {\r\n  const [animes, dispatch] = useReducer(animeReducer, []);\r\n  return (\r\n    <AnimeContext.Provider value={{ animes, dispatch }}>\r\n      {props.children}\r\n    </AnimeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default AnimeContextProvider;\r\n","import { useState, useReducer, useEffect, useContext } from \"react\";\r\nimport { AnimeContext } from \"../contexts/AnimeContext\";\r\n\r\nfunction Input() {\r\n  // const [data, setData] = useState([]);\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [animeName, setAnimeName] = useState(\"\");\r\n  const [data, setData] = useState(\"\");\r\n  const { dispatch } = useContext(AnimeContext);\r\n\r\n  function DataFetcher(name) {\r\n    const query = `query($name: String, $status: MediaStatus) {\r\n            Media(search: $name, type: ANIME, status: $status) {\r\n              id,\r\n              title {\r\n                english,\r\n                romaji,\r\n              },\r\n              status,\r\n              startDate {\r\n                year,\r\n                month,\r\n                day\r\n              },\r\n              averageScore,\r\n              type,\r\n              genres,\r\n             \r\n              episodes,\r\n              nextAiringEpisode {\r\n                id,\r\n                airingAt,\r\n                timeUntilAiring\r\n              },\r\n              bannerImage,\r\n              coverImage {\r\n                large,\r\n                extraLarge\r\n              }\r\n            }\r\n          \r\n          }`;\r\n\r\n    fetch(\"https://graphql.anilist.co\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: { name: name },\r\n      }),\r\n    })\r\n      .then((r) => r.json())\r\n      .then((data) => {\r\n        console.log(\"data returned:\", data);\r\n        if (data.errors) {\r\n          alert(\"ANIME NAME NOT FOUND... BE MORE SPECIFIC\");\r\n        } else {\r\n          setData(data);\r\n          dispatch({\r\n            type: \"ADD_ANIME\",\r\n            anime: {\r\n              name: data.data.Media.title.english\r\n                ? data.data.Media.title.english\r\n                : data.data.Media.title.romaji,\r\n              url: data.data.Media.coverImage.extraLarge,\r\n              genre: data.data.Media.genres,\r\n              aid: data.data.Media.id,\r\n              rating: data.data.Media.averageScore,\r\n              episodes: data.data.Media.episodes,\r\n              date: data.data.Media.startDate,\r\n            },\r\n          });\r\n        }\r\n      });\r\n  }\r\n  function DataLiveFetcher() {\r\n    const query = `query($name: String, $status: MediaStatus) {\r\n            Media((filter: {status: \"RELEASED\"})) {\r\n              id,\r\n              title {\r\n                english,\r\n                romaji,\r\n              },\r\n              status,\r\n              startDate {\r\n                year,\r\n                month,\r\n                day\r\n              },\r\n              averageScore,\r\n              type,\r\n              genres,\r\n             \r\n              episodes,\r\n              nextAiringEpisode {\r\n                id,\r\n                airingAt,\r\n                timeUntilAiring\r\n              },\r\n              bannerImage,\r\n              coverImage {\r\n                large,\r\n                extraLarge\r\n              }\r\n            }\r\n          \r\n          }`;\r\n\r\n    fetch(\"https://graphql.anilist.co\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: { name: name },\r\n      }),\r\n    })\r\n      .then((r) => r.json())\r\n      .then((data) => {\r\n        console.log(\"data returned live:\", data);\r\n        if (data.errors) {\r\n          alert(\"ANIME NAME NOT FOUND... BE MORE SPECIFIC\");\r\n        }\r\n      });\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setAnimeName(name);\r\n    // DataLiveFetcher();\r\n    // console.log(animeName);\r\n    // DataFetcher(animeName);\r\n    // dispatch({ type: \"ADD_ANIME\", anime: { name } });\r\n    setName(\"\");\r\n    // setGenre(\"\");\r\n  }\r\n  useEffect(() => {\r\n    dispatch({ type: \"LOAD_ANIMES\" });\r\n    if (animeName) {\r\n      DataFetcher(animeName);\r\n    }\r\n  }, [animeName]);\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        id=\"input_form\"\r\n        className=\"flex justify-center m-8\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input\r\n          id=\"name\"\r\n          className=\"p-2 mr-4 w-full bg-gray-600 text-gray-100 focus:ring rounded ring-blue-700 xl:w-1/2 lg:w-1/2 md:w-1/2 sm:w-full\"\r\n          type=\"text\"\r\n          name=\"hidden\"\r\n          value={name}\r\n          placeholder=\"Anime Name\"\r\n          autoComplete=\"false\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"px-4 py-2 mr-4 rounded hover:bg-white hover:text-blue-700 bg-blue-700 text-white\"\r\n        >\r\n          INSERT\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import { useContext, useEffect, useRef } from \"react\";\r\nimport \"../card.css\";\r\nimport { AnimeContext } from \"../contexts/AnimeContext\";\r\n\r\nfunction Card(props) {\r\n  const { dispatch } = useContext(AnimeContext);\r\n  const slider = useRef(null);\r\n  let months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  function handleDelete(e) {\r\n    dispatch({ type: \"REMOVE_ANIME\", id: props.id });\r\n  }\r\n\r\n  let mouseDown = false;\r\n  let startX, scrollLeft;\r\n\r\n  let startDragging = function (e) {\r\n    mouseDown = true;\r\n    startX = e.pageX - slider.current.offsetLeft;\r\n    scrollLeft = slider.current.scrollLeft;\r\n  };\r\n  const stopDragging = (event) => {\r\n    mouseDown = false;\r\n  };\r\n\r\n  function mouseMoveEvent(e) {\r\n    e.preventDefault();\r\n\r\n    if (!mouseDown) {\r\n      return;\r\n    }\r\n    const x = e.pageX - slider.current.offsetLeft;\r\n    const scroll = x - startX;\r\n    slider.current.scrollLeft = scrollLeft - scroll;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"card_outer flex items-end z-10\"\r\n        style={{\r\n          background: `linear-gradient(0deg, rgba(0, 0, 0, 0.08), rgba(0, 0, 0, 0.08)),\r\n    url(${props.url}) no-repeat center center/cover`,\r\n        }}\r\n      >\r\n        <div className=\"card_content_cover\"></div>\r\n        <div className=\"card_content my-2\">\r\n          <h1 className=\"pr-2 font-bold text-xl\">{props.name}</h1>\r\n          <div className=\"card_details\">\r\n            <div className=\"episodes\">\r\n              {props.episodes ? `EP : ${props.episodes}` : \"\"}\r\n            </div>\r\n            <div className=\"year\">\r\n              {props.date\r\n                ? `${months[props.date.month - 1]} ${props.date.year}`\r\n                : \"\"}\r\n            </div>\r\n            <div className=\"card_rating\">\r\n              <p>{props.rating ? `${props.rating / 10}` : \"\"}</p>\r\n              <i className=\"fas fa-star\"></i>\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            className=\"genre mb-2\"\r\n            ref={slider}\r\n            onMouseDown={startDragging}\r\n            onMouseUp={stopDragging}\r\n            onMouseLeave={stopDragging}\r\n            onMouseMove={mouseMoveEvent}\r\n          >\r\n            {props.genre.map((item, index) => {\r\n              {\r\n                return (\r\n                  <p\r\n                    className=\"genre_item mr-2 rounded-full py-1 my-1 px-2 bg-gray-600 text-sm bg-opacity-80\"\r\n                    key={index}\r\n                  >\r\n                    {item}\r\n                  </p>\r\n                );\r\n              }\r\n              {\r\n                /* return item + \" \"; */\r\n              }\r\n            })}\r\n          </div>\r\n\r\n          <button\r\n            id=\"delete\"\r\n            className=\"flex justify-center items-center p-2 w-full mx-auto bg-red-600 rounded-md text-white hover:text-red-600 hover:bg-gray-200\"\r\n            onClick={handleDelete}\r\n          >\r\n            <i class=\"far fa-trash-alt mr-2\"></i>DELETE\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import Card from \"./Card\";\r\nimport { AnimeContext } from \"../contexts/AnimeContext\";\r\nimport { useContext } from \"react\";\r\n\r\nfunction Cards() {\r\n  const { animes } = useContext(AnimeContext);\r\n  return animes.length ? (\r\n    <div className=\"cards grid xl:grid-cols-4 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1 gap-4 justify-items-center\">\r\n      {animes.map((anime) => {\r\n        return (\r\n          <Card\r\n            name={anime.name}\r\n            id={anime.id}\r\n            key={anime.id}\r\n            anime_id={anime.aid}\r\n            genre={anime.genre}\r\n            rating={anime.rating}\r\n            episodes={anime.episodes}\r\n            url={anime.url}\r\n            date={anime.date}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  ) : (\r\n    <h1 className=\"empty text-white text-center text-xl font-bold\">\r\n      No More Animes On The List\r\n    </h1>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import \"./App.css\";\nimport Input from \"./components/Input\";\nimport Cards from \"./components/Cards\";\nimport AnimeContextProvider from \"./contexts/AnimeContext\";\n\nfunction App() {\n  return (\n    <AnimeContextProvider>\n      <div className=\"cover \">\n        <div className=\"form\">\n          <Input />\n        </div>\n        <Cards />\n      </div>\n    </AnimeContextProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}